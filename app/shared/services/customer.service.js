"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var http_1 = require("@angular/common/http");
var core_1 = require("@angular/core");
var service_1 = require("~/shared/services/service");
var config_1 = require("../config");
var CustomerService = /** @class */ (function (_super) {
    __extends(CustomerService, _super);
    function CustomerService(http) {
        var _this = _super.call(this) || this;
        _this.http = http;
        return _this;
    }
    CustomerService.prototype.getAllByGroepAction = function (groepId) {
        var headers = this.createRequestHeader();
        var url = config_1.Config.apiUrl + "api/customers/groep/" + groepId;
        console.dir(url);
        return this.http.get(url, { headers: headers });
    };
    CustomerService.prototype.getAllByAgencyForLodgingAndLocationAndPeriodAction = function (agencyId, locationId, date) {
        var headers = this.createRequestHeader();
        var url = config_1.Config.apiUrl + "api/customers/lodging/" + agencyId + "/" + locationId + "/" + date;
        console.dir(url);
        return this.http.get(url, { headers: headers });
    };
    CustomerService.prototype.getAllByGroepWithRaftingOptionAction = function (groepId) {
        var headers = this.createRequestHeader();
        var url = config_1.Config.apiUrl + "api/customers/groep/rafting/" + groepId;
        console.dir(url);
        return this.http.get(url, { headers: headers });
    };
    CustomerService.prototype.getBusGoCustomersByWeek = function (date) {
        var headers = this.createRequestHeader();
        var url = config_1.Config.apiUrl + "api/customers/bus/go/" + date;
        console.dir(url);
        return this.http.get(url, { headers: headers });
    };
    CustomerService.prototype.getBusBackCustomersByWeek = function (date) {
        var headers = this.createRequestHeader();
        var url = config_1.Config.apiUrl + "api/customers/bus/back/" + date;
        console.dir(url);
        return this.http.get(url, { headers: headers });
    };
    CustomerService.prototype.getAllByAllInTypeForLocationAndPeriodAction = function (locationId, date) {
        var headers = this.createRequestHeader();
        var url = config_1.Config.apiUrl + "api/customers/all-in-type/" + locationId + "/" + date;
        console.dir(url);
        return this.http.get(url, { headers: headers });
    };
    CustomerService.prototype.putCustomerSizeAction = function (groepCustomer) {
        var headers = this.createRequestHeader();
        var url = config_1.Config.apiUrl + "api/customers/suitsize/" + groepCustomer.id;
        console.dir(url);
        return this.http.put(url, groepCustomer, { headers: headers });
    };
    CustomerService.prototype.putBusGoCustomerAction = function (busCustomer) {
        var headers = this.createRequestHeader();
        var url = config_1.Config.apiUrl + "api/customers/bus/go/" + busCustomer.id;
        console.dir(url);
        return this.http.put(url, busCustomer, { headers: headers });
    };
    CustomerService.prototype.putBusBackCustomerAction = function (busCustomer) {
        var headers = this.createRequestHeader();
        var url = config_1.Config.apiUrl + "api/customers/bus/back/" + busCustomer.id;
        console.dir(url);
        return this.http.put(url, busCustomer, { headers: headers });
    };
    CustomerService.prototype.putLodgingLayoutCustomerAction = function (lodgingCustomer) {
        var headers = this.createRequestHeader();
        var url = config_1.Config.apiUrl + "api/customers/lodging/layout/" + lodgingCustomer.id;
        console.dir(url);
        return this.http.put(url, lodgingCustomer, { headers: headers });
    };
    CustomerService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [http_1.HttpClient])
    ], CustomerService);
    return CustomerService;
}(service_1.Service));
exports.CustomerService = CustomerService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImN1c3RvbWVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2Q0FBNkU7QUFDN0Usc0NBQTJDO0FBSTNDLHFEQUFvRDtBQUNwRCxvQ0FBbUM7QUFVbkM7SUFBcUMsbUNBQU87SUFDeEMseUJBQW9CLElBQWdCO1FBQXBDLFlBQ0ksaUJBQU8sU0FDVjtRQUZtQixVQUFJLEdBQUosSUFBSSxDQUFZOztJQUVwQyxDQUFDO0lBRUQsNkNBQW1CLEdBQW5CLFVBQW9CLE9BQU87UUFDdkIsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDM0MsSUFBTSxHQUFHLEdBQUcsZUFBTSxDQUFDLE1BQU0sR0FBRyxzQkFBc0IsR0FBRyxPQUFPLENBQUM7UUFDN0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVqQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQXVCLEdBQUcsRUFBRSxFQUFFLE9BQU8sU0FBQSxFQUFFLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRUQsNEVBQWtELEdBQWxELFVBQW1ELFFBQVEsRUFBRSxVQUFVLEVBQUUsSUFBSTtRQUN6RSxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUMzQyxJQUFNLEdBQUcsR0FBRyxlQUFNLENBQUMsTUFBTSxHQUFHLHdCQUF3QixHQUFHLFFBQVEsR0FBRyxHQUFHLEdBQUcsVUFBVSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUM7UUFDaEcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVqQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQVUsR0FBRyxFQUFFLEVBQUUsT0FBTyxTQUFBLEVBQUUsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFRCw4REFBb0MsR0FBcEMsVUFBcUMsT0FBTztRQUN4QyxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUMzQyxJQUFNLEdBQUcsR0FBRyxlQUFNLENBQUMsTUFBTSxHQUFHLDhCQUE4QixHQUFHLE9BQU8sQ0FBQztRQUNyRSxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBeUIsR0FBRyxFQUFFLEVBQUUsT0FBTyxTQUFBLEVBQUUsQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFRCxpREFBdUIsR0FBdkIsVUFBd0IsSUFBSTtRQUN4QixJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUMzQyxJQUFNLEdBQUcsR0FBRyxlQUFNLENBQUMsTUFBTSxHQUFHLHVCQUF1QixHQUFHLElBQUksQ0FBQztRQUMzRCxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBYSxHQUFHLEVBQUUsRUFBRSxPQUFPLFNBQUEsRUFBRSxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVELG1EQUF5QixHQUF6QixVQUEwQixJQUFJO1FBQzFCLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBQzNDLElBQU0sR0FBRyxHQUFHLGVBQU0sQ0FBQyxNQUFNLEdBQUcseUJBQXlCLEdBQUcsSUFBSSxDQUFDO1FBQzdELE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFakIsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFhLEdBQUcsRUFBRSxFQUFFLE9BQU8sU0FBQSxFQUFFLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQscUVBQTJDLEdBQTNDLFVBQTRDLFVBQVUsRUFBRSxJQUFJO1FBQ3hELElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBQzNDLElBQU0sR0FBRyxHQUFHLGVBQU0sQ0FBQyxNQUFNLEdBQUcsNEJBQTRCLEdBQUcsVUFBVSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUM7UUFDbkYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVqQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQWEsR0FBRyxFQUFFLEVBQUUsT0FBTyxTQUFBLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCwrQ0FBcUIsR0FBckIsVUFBc0IsYUFBNEI7UUFDOUMsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDM0MsSUFBTSxHQUFHLEdBQUcsZUFBTSxDQUFDLE1BQU0sR0FBRyx5QkFBeUIsR0FBRyxhQUFhLENBQUMsRUFBRSxDQUFDO1FBQ3pFLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFakIsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxhQUFhLEVBQUUsRUFBRSxPQUFPLFNBQUEsRUFBRSxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVELGdEQUFzQixHQUF0QixVQUF1QixXQUF3QjtRQUMzQyxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUMzQyxJQUFNLEdBQUcsR0FBRyxlQUFNLENBQUMsTUFBTSxHQUFHLHVCQUF1QixHQUFHLFdBQVcsQ0FBQyxFQUFFLENBQUM7UUFDckUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVqQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxFQUFFLE9BQU8sU0FBQSxFQUFFLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQsa0RBQXdCLEdBQXhCLFVBQXlCLFdBQXdCO1FBQzdDLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBQzNDLElBQU0sR0FBRyxHQUFHLGVBQU0sQ0FBQyxNQUFNLEdBQUcseUJBQXlCLEdBQUcsV0FBVyxDQUFDLEVBQUUsQ0FBQztRQUN2RSxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLEVBQUUsT0FBTyxTQUFBLEVBQUUsQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRCx3REFBOEIsR0FBOUIsVUFBK0IsZUFBZ0M7UUFDM0QsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDM0MsSUFBTSxHQUFHLEdBQUcsZUFBTSxDQUFDLE1BQU0sR0FBRywrQkFBK0IsR0FBRyxlQUFlLENBQUMsRUFBRSxDQUFDO1FBQ2pGLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFakIsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxlQUFlLEVBQUUsRUFBRSxPQUFPLFNBQUEsRUFBRSxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQW5GUSxlQUFlO1FBRDNCLGlCQUFVLEVBQUU7eUNBRWlCLGlCQUFVO09BRDNCLGVBQWUsQ0FxRjNCO0lBQUQsc0JBQUM7Q0FBQSxBQXJGRCxDQUFxQyxpQkFBTyxHQXFGM0M7QUFyRlksMENBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwSGVhZGVycywgSHR0cFJlc3BvbnNlIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vbi9odHRwXCI7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xuXG5pbXBvcnQgeyBHcm9lcCB9IGZyb20gXCJ+L3NoYXJlZC9tb2RlbHMvZ3JvZXAubW9kZWxcIjtcbmltcG9ydCB7IFNlcnZpY2UgfSBmcm9tIFwifi9zaGFyZWQvc2VydmljZXMvc2VydmljZVwiO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIi4uL2NvbmZpZ1wiO1xuaW1wb3J0IHtHcm9lcEN1c3RvbWVyfSBmcm9tIFwifi9zaGFyZWQvbW9kZWxzL2dyb2VwQ3VzdG9tZXIubW9kZWxcIjtcbmltcG9ydCB7UmFmdGluZ0N1c3RvbWVyfSBmcm9tIFwifi9zaGFyZWQvbW9kZWxzL3JhZnRpbmdDdXN0b21lci5tb2RlbFwiO1xuaW1wb3J0IHtDaGVja2luQnVzfSBmcm9tIFwifi9zaGFyZWQvbW9kZWxzL2NoZWNraW5CdXMubW9kZWxcIjtcbmltcG9ydCB7QnVzQ3VzdG9tZXJ9IGZyb20gXCJ+L3NoYXJlZC9tb2RlbHMvYnVzQ3VzdG9tZXIubW9kZWxcIjtcbmltcG9ydCB7TG9kZ2luZ0N1c3RvbWVyfSBmcm9tIFwifi9zaGFyZWQvbW9kZWxzL2xvZGdpbmdDdXN0b21lci5tb2RlbFwiO1xuaW1wb3J0IHtMb2RnaW5nfSBmcm9tIFwifi9zaGFyZWQvbW9kZWxzL2xvZGdpbmcubW9kZWxcIjtcbmltcG9ydCB7Vm9scGVuc2lvbn0gZnJvbSBcIn4vc2hhcmVkL21vZGVscy92b2xwZW5zaW9uLm1vZGVsXCI7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDdXN0b21lclNlcnZpY2UgZXh0ZW5kcyBTZXJ2aWNlIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBnZXRBbGxCeUdyb2VwQWN0aW9uKGdyb2VwSWQpOiBPYnNlcnZhYmxlPEFycmF5PEdyb2VwQ3VzdG9tZXI+PiB7XG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSB0aGlzLmNyZWF0ZVJlcXVlc3RIZWFkZXIoKTtcbiAgICAgICAgY29uc3QgdXJsID0gQ29uZmlnLmFwaVVybCArIFwiYXBpL2N1c3RvbWVycy9ncm9lcC9cIiArIGdyb2VwSWQ7XG4gICAgICAgIGNvbnNvbGUuZGlyKHVybCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8QXJyYXk8R3JvZXBDdXN0b21lcj4+KHVybCwgeyBoZWFkZXJzIH0pO1xuICAgIH1cblxuICAgIGdldEFsbEJ5QWdlbmN5Rm9yTG9kZ2luZ0FuZExvY2F0aW9uQW5kUGVyaW9kQWN0aW9uKGFnZW5jeUlkLCBsb2NhdGlvbklkLCBkYXRlKTogT2JzZXJ2YWJsZTxMb2RnaW5nPiB7XG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSB0aGlzLmNyZWF0ZVJlcXVlc3RIZWFkZXIoKTtcbiAgICAgICAgY29uc3QgdXJsID0gQ29uZmlnLmFwaVVybCArIFwiYXBpL2N1c3RvbWVycy9sb2RnaW5nL1wiICsgYWdlbmN5SWQgKyBcIi9cIiArIGxvY2F0aW9uSWQgKyBcIi9cIiArIGRhdGU7XG4gICAgICAgIGNvbnNvbGUuZGlyKHVybCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8TG9kZ2luZz4odXJsLCB7IGhlYWRlcnMgfSk7XG4gICAgfVxuXG4gICAgZ2V0QWxsQnlHcm9lcFdpdGhSYWZ0aW5nT3B0aW9uQWN0aW9uKGdyb2VwSWQpOiBPYnNlcnZhYmxlPEFycmF5PFJhZnRpbmdDdXN0b21lcj4+IHtcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHRoaXMuY3JlYXRlUmVxdWVzdEhlYWRlcigpO1xuICAgICAgICBjb25zdCB1cmwgPSBDb25maWcuYXBpVXJsICsgXCJhcGkvY3VzdG9tZXJzL2dyb2VwL3JhZnRpbmcvXCIgKyBncm9lcElkO1xuICAgICAgICBjb25zb2xlLmRpcih1cmwpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PEFycmF5PFJhZnRpbmdDdXN0b21lcj4+KHVybCwgeyBoZWFkZXJzIH0pO1xuICAgIH1cblxuICAgIGdldEJ1c0dvQ3VzdG9tZXJzQnlXZWVrKGRhdGUpOiBPYnNlcnZhYmxlPENoZWNraW5CdXM+IHtcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHRoaXMuY3JlYXRlUmVxdWVzdEhlYWRlcigpO1xuICAgICAgICBjb25zdCB1cmwgPSBDb25maWcuYXBpVXJsICsgXCJhcGkvY3VzdG9tZXJzL2J1cy9nby9cIiArIGRhdGU7XG4gICAgICAgIGNvbnNvbGUuZGlyKHVybCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8Q2hlY2tpbkJ1cz4odXJsLCB7IGhlYWRlcnMgfSk7XG4gICAgfVxuXG4gICAgZ2V0QnVzQmFja0N1c3RvbWVyc0J5V2VlayhkYXRlKTogT2JzZXJ2YWJsZTxDaGVja2luQnVzPiB7XG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSB0aGlzLmNyZWF0ZVJlcXVlc3RIZWFkZXIoKTtcbiAgICAgICAgY29uc3QgdXJsID0gQ29uZmlnLmFwaVVybCArIFwiYXBpL2N1c3RvbWVycy9idXMvYmFjay9cIiArIGRhdGU7XG4gICAgICAgIGNvbnNvbGUuZGlyKHVybCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8Q2hlY2tpbkJ1cz4odXJsLCB7IGhlYWRlcnMgfSk7XG4gICAgfVxuXG4gICAgZ2V0QWxsQnlBbGxJblR5cGVGb3JMb2NhdGlvbkFuZFBlcmlvZEFjdGlvbihsb2NhdGlvbklkLCBkYXRlKTogT2JzZXJ2YWJsZTxWb2xwZW5zaW9uPiB7XG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSB0aGlzLmNyZWF0ZVJlcXVlc3RIZWFkZXIoKTtcbiAgICAgICAgY29uc3QgdXJsID0gQ29uZmlnLmFwaVVybCArIFwiYXBpL2N1c3RvbWVycy9hbGwtaW4tdHlwZS9cIiArIGxvY2F0aW9uSWQgKyBcIi9cIiArIGRhdGU7XG4gICAgICAgIGNvbnNvbGUuZGlyKHVybCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8Vm9scGVuc2lvbj4odXJsLCB7IGhlYWRlcnMgfSk7XG4gICAgfVxuXG4gICAgcHV0Q3VzdG9tZXJTaXplQWN0aW9uKGdyb2VwQ3VzdG9tZXI6IEdyb2VwQ3VzdG9tZXIpOiBPYnNlcnZhYmxlPG9iamVjdD4ge1xuICAgICAgICBjb25zdCBoZWFkZXJzID0gdGhpcy5jcmVhdGVSZXF1ZXN0SGVhZGVyKCk7XG4gICAgICAgIGNvbnN0IHVybCA9IENvbmZpZy5hcGlVcmwgKyBcImFwaS9jdXN0b21lcnMvc3VpdHNpemUvXCIgKyBncm9lcEN1c3RvbWVyLmlkO1xuICAgICAgICBjb25zb2xlLmRpcih1cmwpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAucHV0KHVybCwgZ3JvZXBDdXN0b21lciwgeyBoZWFkZXJzIH0pO1xuICAgIH1cblxuICAgIHB1dEJ1c0dvQ3VzdG9tZXJBY3Rpb24oYnVzQ3VzdG9tZXI6IEJ1c0N1c3RvbWVyKTogT2JzZXJ2YWJsZTxvYmplY3Q+IHtcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHRoaXMuY3JlYXRlUmVxdWVzdEhlYWRlcigpO1xuICAgICAgICBjb25zdCB1cmwgPSBDb25maWcuYXBpVXJsICsgXCJhcGkvY3VzdG9tZXJzL2J1cy9nby9cIiArIGJ1c0N1c3RvbWVyLmlkO1xuICAgICAgICBjb25zb2xlLmRpcih1cmwpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAucHV0KHVybCwgYnVzQ3VzdG9tZXIsIHsgaGVhZGVycyB9KTtcbiAgICB9XG5cbiAgICBwdXRCdXNCYWNrQ3VzdG9tZXJBY3Rpb24oYnVzQ3VzdG9tZXI6IEJ1c0N1c3RvbWVyKTogT2JzZXJ2YWJsZTxvYmplY3Q+IHtcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHRoaXMuY3JlYXRlUmVxdWVzdEhlYWRlcigpO1xuICAgICAgICBjb25zdCB1cmwgPSBDb25maWcuYXBpVXJsICsgXCJhcGkvY3VzdG9tZXJzL2J1cy9iYWNrL1wiICsgYnVzQ3VzdG9tZXIuaWQ7XG4gICAgICAgIGNvbnNvbGUuZGlyKHVybCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wdXQodXJsLCBidXNDdXN0b21lciwgeyBoZWFkZXJzIH0pO1xuICAgIH1cblxuICAgIHB1dExvZGdpbmdMYXlvdXRDdXN0b21lckFjdGlvbihsb2RnaW5nQ3VzdG9tZXI6IExvZGdpbmdDdXN0b21lcik6IE9ic2VydmFibGU8b2JqZWN0PiB7XG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSB0aGlzLmNyZWF0ZVJlcXVlc3RIZWFkZXIoKTtcbiAgICAgICAgY29uc3QgdXJsID0gQ29uZmlnLmFwaVVybCArIFwiYXBpL2N1c3RvbWVycy9sb2RnaW5nL2xheW91dC9cIiArIGxvZGdpbmdDdXN0b21lci5pZDtcbiAgICAgICAgY29uc29sZS5kaXIodXJsKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5odHRwLnB1dCh1cmwsIGxvZGdpbmdDdXN0b21lciwgeyBoZWFkZXJzIH0pO1xuICAgIH1cblxufVxuIl19